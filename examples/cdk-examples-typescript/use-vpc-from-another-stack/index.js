#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const autoscaling = require("@aws-cdk/aws-autoscaling");
const ec2 = require("@aws-cdk/aws-ec2");
const elb = require("@aws-cdk/aws-elasticloadbalancing");
const cdk = require("@aws-cdk/cdk");
const app = new cdk.App();
const vpcStack = new cdk.Stack(app, 'VPCStack');
const exportedVpc = new ec2.VpcNetwork(vpcStack, 'VPC', {
    maxAZs: 3
});
const appStack = new cdk.Stack(app, 'AppStack');
const importedVpc = ec2.VpcNetworkRef.import(appStack, 'VPC', exportedVpc.export());
const asg = new autoscaling.AutoScalingGroup(appStack, 'ASG', {
    vpc: importedVpc,
    instanceType: new ec2.InstanceTypePair(ec2.InstanceClass.Burstable2, ec2.InstanceSize.Micro),
    machineImage: new ec2.AmazonLinuxImage()
});
new elb.LoadBalancer(appStack, 'LB', {
    vpc: importedVpc,
    internetFacing: true,
    listeners: [{
            externalPort: 80,
            allowConnectionsFrom: [new ec2.AnyIPv4()]
        }],
    healthCheck: {
        port: 80
    },
    targets: [asg]
});
app.run();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFLQSx3REFBeUQ7QUFDekQsd0NBQXlDO0FBQ3pDLHlEQUEwRDtBQUMxRCxvQ0FBcUM7QUFFckMsTUFBTSxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUM7QUFDMUIsTUFBTSxRQUFRLEdBQUcsSUFBSSxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRSxVQUFVLENBQUMsQ0FBQztBQUVoRCxNQUFNLFdBQVcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxVQUFVLENBQUMsUUFBUSxFQUFFLEtBQUssRUFBRTtJQUN0RCxNQUFNLEVBQUUsQ0FBQztDQUNWLENBQUMsQ0FBQztBQUVILE1BQU0sUUFBUSxHQUFHLElBQUksR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsVUFBVSxDQUFDLENBQUM7QUFFaEQsTUFBTSxXQUFXLEdBQUcsR0FBRyxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLEtBQUssRUFBRSxXQUFXLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQztBQUVwRixNQUFNLEdBQUcsR0FBRyxJQUFJLFdBQVcsQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLEVBQUUsS0FBSyxFQUFFO0lBQzVELEdBQUcsRUFBRSxXQUFXO0lBQ2hCLFlBQVksRUFBRSxJQUFJLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLFVBQVUsRUFBRSxHQUFHLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQztJQUM1RixZQUFZLEVBQUUsSUFBSSxHQUFHLENBQUMsZ0JBQWdCLEVBQUU7Q0FDekMsQ0FBQyxDQUFDO0FBRUgsSUFBSSxHQUFHLENBQUMsWUFBWSxDQUFDLFFBQVEsRUFBRSxJQUFJLEVBQUU7SUFDbkMsR0FBRyxFQUFFLFdBQVc7SUFDaEIsY0FBYyxFQUFFLElBQUk7SUFDcEIsU0FBUyxFQUFFLENBQUM7WUFDVixZQUFZLEVBQUUsRUFBRTtZQUNoQixvQkFBb0IsRUFBRSxDQUFDLElBQUksR0FBRyxDQUFDLE9BQU8sRUFBRSxDQUFDO1NBQzFDLENBQUM7SUFDRixXQUFXLEVBQUU7UUFDWCxJQUFJLEVBQUUsRUFBRTtLQUNUO0lBQ0QsT0FBTyxFQUFFLENBQUMsR0FBRyxDQUFDO0NBQ2YsQ0FBQyxDQUFDO0FBRUgsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiIyEvdXNyL2Jpbi9lbnYgbm9kZVxuLy8gTGlrZSBhbiBpbnRlZyB0ZXN0LCBidXQgb3VyIGludGVnIHRlc3QgZG9lc24ndCBjdXJyZW50bHlcbi8vIHN1cHBvcnQgbXVsdGktc3RhY2sgZGVwbG95bWVudHMgc2luY2Ugd2UgaGF2ZSBubyBnb29kIHdheSBvZlxuLy8gb3JkZXJpbmcgc3RhY2sgZGVwbG95bWVudHMuIFNvIHJ1biB0aGlzIHRlc3QgYnkgaGFuZCBmb3Igbm93XG4vLyB1bnRpbCB3ZSBoYXZlIHRoYXQuXG5pbXBvcnQgYXV0b3NjYWxpbmcgPSByZXF1aXJlKCdAYXdzLWNkay9hd3MtYXV0b3NjYWxpbmcnKTtcbmltcG9ydCBlYzIgPSByZXF1aXJlKCdAYXdzLWNkay9hd3MtZWMyJyk7XG5pbXBvcnQgZWxiID0gcmVxdWlyZSgnQGF3cy1jZGsvYXdzLWVsYXN0aWNsb2FkYmFsYW5jaW5nJyk7XG5pbXBvcnQgY2RrID0gcmVxdWlyZSgnQGF3cy1jZGsvY2RrJyk7XG5cbmNvbnN0IGFwcCA9IG5ldyBjZGsuQXBwKCk7XG5jb25zdCB2cGNTdGFjayA9IG5ldyBjZGsuU3RhY2soYXBwLCAnVlBDU3RhY2snKTtcblxuY29uc3QgZXhwb3J0ZWRWcGMgPSBuZXcgZWMyLlZwY05ldHdvcmsodnBjU3RhY2ssICdWUEMnLCB7XG4gIG1heEFaczogM1xufSk7XG5cbmNvbnN0IGFwcFN0YWNrID0gbmV3IGNkay5TdGFjayhhcHAsICdBcHBTdGFjaycpO1xuXG5jb25zdCBpbXBvcnRlZFZwYyA9IGVjMi5WcGNOZXR3b3JrUmVmLmltcG9ydChhcHBTdGFjaywgJ1ZQQycsIGV4cG9ydGVkVnBjLmV4cG9ydCgpKTtcblxuY29uc3QgYXNnID0gbmV3IGF1dG9zY2FsaW5nLkF1dG9TY2FsaW5nR3JvdXAoYXBwU3RhY2ssICdBU0cnLCB7XG4gIHZwYzogaW1wb3J0ZWRWcGMsXG4gIGluc3RhbmNlVHlwZTogbmV3IGVjMi5JbnN0YW5jZVR5cGVQYWlyKGVjMi5JbnN0YW5jZUNsYXNzLkJ1cnN0YWJsZTIsIGVjMi5JbnN0YW5jZVNpemUuTWljcm8pLFxuICBtYWNoaW5lSW1hZ2U6IG5ldyBlYzIuQW1hem9uTGludXhJbWFnZSgpXG59KTtcblxubmV3IGVsYi5Mb2FkQmFsYW5jZXIoYXBwU3RhY2ssICdMQicsIHtcbiAgdnBjOiBpbXBvcnRlZFZwYyxcbiAgaW50ZXJuZXRGYWNpbmc6IHRydWUsXG4gIGxpc3RlbmVyczogW3tcbiAgICBleHRlcm5hbFBvcnQ6IDgwLFxuICAgIGFsbG93Q29ubmVjdGlvbnNGcm9tOiBbbmV3IGVjMi5BbnlJUHY0KCldXG4gIH1dLFxuICBoZWFsdGhDaGVjazoge1xuICAgIHBvcnQ6IDgwXG4gIH0sXG4gIHRhcmdldHM6IFthc2ddXG59KTtcblxuYXBwLnJ1bigpO1xuIl19