"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const iam = require("@aws-cdk/aws-iam");
const s3 = require("@aws-cdk/aws-s3");
const cdk = require("@aws-cdk/cdk");
// Define a stack with an S3 bucket and export it using `bucket.export()`.
// bucket.export returns a `BucketRef` object which can later be used in
// `Bucket.import`.
class Producer extends cdk.Stack {
    constructor(parent, name) {
        super(parent, name);
        const bucket = new s3.Bucket(this, 'MyBucket');
        this.myBucketRef = bucket.export();
    }
}
class ConsumerConstruct extends cdk.Construct {
    constructor(parent, name, props) {
        super(parent, name);
        props.bucket.addToResourcePolicy(new iam.PolicyStatement().addAction('*'));
    }
}
class Consumer extends cdk.Stack {
    constructor(parent, name, props) {
        super(parent, name);
        const user = new iam.User(this, 'MyUser');
        const userBucket = s3.Bucket.import(this, 'ImportBucket', props.userBucketRef);
        new ConsumerConstruct(this, 'SomeConstruct', { bucket: userBucket });
        userBucket.grantReadWrite(user);
    }
}
// -------------------------------------------------------
// NOTE: To deploy this, just run `cdk -a "node file.js" deploy`. The stacks
// will be deployed IN-ORDER which means that the producer will be deployed
// first. In the future the toolkit will be able to understand the relationships
// between the stacks and will deploy them in order.
const app = new cdk.App();
const producer = new Producer(app, 'produce');
new Consumer(app, 'consume', {
    userBucketRef: producer.myBucketRef
});
app.run();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHdDQUF5QztBQUN6QyxzQ0FBdUM7QUFDdkMsb0NBQXFDO0FBRXJDLDBFQUEwRTtBQUMxRSx3RUFBd0U7QUFDeEUsbUJBQW1CO0FBRW5CLE1BQU0sUUFBUyxTQUFRLEdBQUcsQ0FBQyxLQUFLO0lBRzlCLFlBQVksTUFBZSxFQUFFLElBQVk7UUFDdkMsS0FBSyxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQztRQUVwQixNQUFNLE1BQU0sR0FBRyxJQUFJLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLFVBQVUsQ0FBQyxDQUFDO1FBQy9DLElBQUksQ0FBQyxXQUFXLEdBQUcsTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDO0lBQ3JDLENBQUM7Q0FDRjtBQU1ELE1BQU0saUJBQWtCLFNBQVEsR0FBRyxDQUFDLFNBQVM7SUFDM0MsWUFBWSxNQUFxQixFQUFFLElBQVksRUFBRSxLQUE2QjtRQUM1RSxLQUFLLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBRXBCLEtBQUssQ0FBQyxNQUFNLENBQUMsbUJBQW1CLENBQUMsSUFBSSxHQUFHLENBQUMsZUFBZSxFQUFFLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDN0UsQ0FBQztDQUNGO0FBV0QsTUFBTSxRQUFTLFNBQVEsR0FBRyxDQUFDLEtBQUs7SUFDOUIsWUFBWSxNQUFlLEVBQUUsSUFBWSxFQUFFLEtBQW9CO1FBQzdELEtBQUssQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFFcEIsTUFBTSxJQUFJLEdBQUcsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxRQUFRLENBQUMsQ0FBQztRQUMxQyxNQUFNLFVBQVUsR0FBRyxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsY0FBYyxFQUFFLEtBQUssQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUUvRSxJQUFJLGlCQUFpQixDQUFDLElBQUksRUFBRSxlQUFlLEVBQUUsRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLENBQUMsQ0FBQztRQUVyRSxVQUFVLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ2xDLENBQUM7Q0FDRjtBQUVELDBEQUEwRDtBQUMxRCw0RUFBNEU7QUFDNUUsMkVBQTJFO0FBQzNFLGdGQUFnRjtBQUNoRixvREFBb0Q7QUFFcEQsTUFBTSxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUM7QUFFMUIsTUFBTSxRQUFRLEdBQUcsSUFBSSxRQUFRLENBQUMsR0FBRyxFQUFFLFNBQVMsQ0FBQyxDQUFDO0FBRTlDLElBQUksUUFBUSxDQUFDLEdBQUcsRUFBRSxTQUFTLEVBQUU7SUFDM0IsYUFBYSxFQUFFLFFBQVEsQ0FBQyxXQUFXO0NBQ3BDLENBQUMsQ0FBQztBQUVILEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBpYW0gPSByZXF1aXJlKCdAYXdzLWNkay9hd3MtaWFtJyk7XG5pbXBvcnQgczMgPSByZXF1aXJlKCdAYXdzLWNkay9hd3MtczMnKTtcbmltcG9ydCBjZGsgPSByZXF1aXJlKCdAYXdzLWNkay9jZGsnKTtcblxuLy8gRGVmaW5lIGEgc3RhY2sgd2l0aCBhbiBTMyBidWNrZXQgYW5kIGV4cG9ydCBpdCB1c2luZyBgYnVja2V0LmV4cG9ydCgpYC5cbi8vIGJ1Y2tldC5leHBvcnQgcmV0dXJucyBhIGBCdWNrZXRSZWZgIG9iamVjdCB3aGljaCBjYW4gbGF0ZXIgYmUgdXNlZCBpblxuLy8gYEJ1Y2tldC5pbXBvcnRgLlxuXG5jbGFzcyBQcm9kdWNlciBleHRlbmRzIGNkay5TdGFjayB7XG4gIHB1YmxpYyByZWFkb25seSBteUJ1Y2tldFJlZjogczMuQnVja2V0UmVmUHJvcHM7XG5cbiAgY29uc3RydWN0b3IocGFyZW50OiBjZGsuQXBwLCBuYW1lOiBzdHJpbmcpIHtcbiAgICBzdXBlcihwYXJlbnQsIG5hbWUpO1xuXG4gICAgY29uc3QgYnVja2V0ID0gbmV3IHMzLkJ1Y2tldCh0aGlzLCAnTXlCdWNrZXQnKTtcbiAgICB0aGlzLm15QnVja2V0UmVmID0gYnVja2V0LmV4cG9ydCgpO1xuICB9XG59XG5cbmludGVyZmFjZSBDb25zdW1lckNvbnN0cnVjdFByb3BzIHtcbiAgYnVja2V0OiBzMy5CdWNrZXRSZWY7XG59XG5cbmNsYXNzIENvbnN1bWVyQ29uc3RydWN0IGV4dGVuZHMgY2RrLkNvbnN0cnVjdCB7XG4gIGNvbnN0cnVjdG9yKHBhcmVudDogY2RrLkNvbnN0cnVjdCwgbmFtZTogc3RyaW5nLCBwcm9wczogQ29uc3VtZXJDb25zdHJ1Y3RQcm9wcykge1xuICAgIHN1cGVyKHBhcmVudCwgbmFtZSk7XG5cbiAgICBwcm9wcy5idWNrZXQuYWRkVG9SZXNvdXJjZVBvbGljeShuZXcgaWFtLlBvbGljeVN0YXRlbWVudCgpLmFkZEFjdGlvbignKicpKTtcbiAgfVxufVxuXG4vLyBEZWZpbmUgYSBzdGFjayB0aGF0IHJlcXVpcmVzIGEgQnVja2V0UmVmIGFzIGFuIGlucHV0IGFuZCB1c2VzIGBCdWNrZXQuaW1wb3J0YFxuLy8gdG8gY3JlYXRlIGEgYEJ1Y2tldGAgb2JqZWN0IHRoYXQgcmVwcmVzZW50cyB0aGlzIGV4dGVybmFsIGJ1Y2tldC4gR3JhbnQgYVxuLy8gdXNlciBwcmluY2lwYWwgY3JlYXRlZCB3aXRoaW4gdGhpcyBjb25zdW1pbmcgc3RhY2sgcmVhZC93cml0ZSBwZXJtaXNzaW9ucyB0b1xuLy8gdGhpcyBidWNrZXQgYW5kIGNvbnRlbnRzLlxuXG5pbnRlcmZhY2UgQ29uc3VtZXJQcm9wcyB7XG4gIHVzZXJCdWNrZXRSZWY6IHMzLkJ1Y2tldFJlZlByb3BzO1xufVxuXG5jbGFzcyBDb25zdW1lciBleHRlbmRzIGNkay5TdGFjayB7XG4gIGNvbnN0cnVjdG9yKHBhcmVudDogY2RrLkFwcCwgbmFtZTogc3RyaW5nLCBwcm9wczogQ29uc3VtZXJQcm9wcykge1xuICAgIHN1cGVyKHBhcmVudCwgbmFtZSk7XG5cbiAgICBjb25zdCB1c2VyID0gbmV3IGlhbS5Vc2VyKHRoaXMsICdNeVVzZXInKTtcbiAgICBjb25zdCB1c2VyQnVja2V0ID0gczMuQnVja2V0LmltcG9ydCh0aGlzLCAnSW1wb3J0QnVja2V0JywgcHJvcHMudXNlckJ1Y2tldFJlZik7XG5cbiAgICBuZXcgQ29uc3VtZXJDb25zdHJ1Y3QodGhpcywgJ1NvbWVDb25zdHJ1Y3QnLCB7IGJ1Y2tldDogdXNlckJ1Y2tldCB9KTtcblxuICAgIHVzZXJCdWNrZXQuZ3JhbnRSZWFkV3JpdGUodXNlcik7XG4gIH1cbn1cblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gTk9URTogVG8gZGVwbG95IHRoaXMsIGp1c3QgcnVuIGBjZGsgLWEgXCJub2RlIGZpbGUuanNcIiBkZXBsb3lgLiBUaGUgc3RhY2tzXG4vLyB3aWxsIGJlIGRlcGxveWVkIElOLU9SREVSIHdoaWNoIG1lYW5zIHRoYXQgdGhlIHByb2R1Y2VyIHdpbGwgYmUgZGVwbG95ZWRcbi8vIGZpcnN0LiBJbiB0aGUgZnV0dXJlIHRoZSB0b29sa2l0IHdpbGwgYmUgYWJsZSB0byB1bmRlcnN0YW5kIHRoZSByZWxhdGlvbnNoaXBzXG4vLyBiZXR3ZWVuIHRoZSBzdGFja3MgYW5kIHdpbGwgZGVwbG95IHRoZW0gaW4gb3JkZXIuXG5cbmNvbnN0IGFwcCA9IG5ldyBjZGsuQXBwKCk7XG5cbmNvbnN0IHByb2R1Y2VyID0gbmV3IFByb2R1Y2VyKGFwcCwgJ3Byb2R1Y2UnKTtcblxubmV3IENvbnN1bWVyKGFwcCwgJ2NvbnN1bWUnLCB7XG4gIHVzZXJCdWNrZXRSZWY6IHByb2R1Y2VyLm15QnVja2V0UmVmXG59KTtcblxuYXBwLnJ1bigpO1xuIl19