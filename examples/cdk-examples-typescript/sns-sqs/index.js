"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const iam = require("@aws-cdk/aws-iam");
const sns = require("@aws-cdk/aws-sns");
const sqs = require("@aws-cdk/aws-sqs");
const cdk = require("@aws-cdk/cdk");
class ACL extends cdk.Stack {
    constructor(parent, name) {
        super(parent, name);
        const topic = new sns.Topic(this, 'MyTopic');
        const queue = new sqs.Queue(this, 'MyQueue', {
            visibilityTimeoutSec: 300
        });
        topic.subscribeQueue(queue);
    }
}
class CFN extends cdk.Stack {
    constructor(parent, name) {
        super(parent, name);
        const topic = new sns.cloudformation.TopicResource(this, 'MyTopic');
        const queue = new sqs.cloudformation.QueueResource(this, 'MyQueue');
        new sns.cloudformation.SubscriptionResource(this, 'TopicToQueue', {
            topicArn: topic.ref,
            endpoint: queue.queueName,
            protocol: 'sqs'
        });
        const policyDocument = new iam.PolicyDocument();
        policyDocument.addStatement(new iam.PolicyStatement()
            .addResource(queue.queueArn)
            .addAction('sqs:SendMessage')
            .addServicePrincipal('sns.amazonaws.com')
            .setCondition('ArnEquals', { 'aws:SourceArn': topic.ref }));
        new sqs.cloudformation.QueuePolicyResource(this, 'MyQueuePolicy', {
            policyDocument,
            queues: [queue.ref]
        });
    }
}
const app = new cdk.App();
new ACL(app, 'acl');
new CFN(app, 'cfn');
app.run();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHdDQUF5QztBQUN6Qyx3Q0FBeUM7QUFDekMsd0NBQXlDO0FBQ3pDLG9DQUFxQztBQUVyQyxNQUFNLEdBQUksU0FBUSxHQUFHLENBQUMsS0FBSztJQUN6QixZQUFZLE1BQWUsRUFBRSxJQUFZO1FBQ3ZDLEtBQUssQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFFcEIsTUFBTSxLQUFLLEdBQUcsSUFBSSxHQUFHLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxTQUFTLENBQUMsQ0FBQztRQUM3QyxNQUFNLEtBQUssR0FBRyxJQUFJLEdBQUcsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLFNBQVMsRUFBRTtZQUMzQyxvQkFBb0IsRUFBRSxHQUFHO1NBQzFCLENBQUMsQ0FBQztRQUVILEtBQUssQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDOUIsQ0FBQztDQUNGO0FBRUQsTUFBTSxHQUFJLFNBQVEsR0FBRyxDQUFDLEtBQUs7SUFDekIsWUFBWSxNQUFlLEVBQUUsSUFBWTtRQUN2QyxLQUFLLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBRXBCLE1BQU0sS0FBSyxHQUFHLElBQUksR0FBRyxDQUFDLGNBQWMsQ0FBQyxhQUFhLENBQUMsSUFBSSxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBQ3BFLE1BQU0sS0FBSyxHQUFHLElBQUksR0FBRyxDQUFDLGNBQWMsQ0FBQyxhQUFhLENBQUMsSUFBSSxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBRXBFLElBQUksR0FBRyxDQUFDLGNBQWMsQ0FBQyxvQkFBb0IsQ0FBQyxJQUFJLEVBQUUsY0FBYyxFQUFFO1lBQ2hFLFFBQVEsRUFBRSxLQUFLLENBQUMsR0FBRztZQUNuQixRQUFRLEVBQUUsS0FBSyxDQUFDLFNBQVM7WUFDekIsUUFBUSxFQUFFLEtBQUs7U0FDaEIsQ0FBQyxDQUFDO1FBRUgsTUFBTSxjQUFjLEdBQUcsSUFBSSxHQUFHLENBQUMsY0FBYyxFQUFFLENBQUM7UUFDaEQsY0FBYyxDQUFDLFlBQVksQ0FBQyxJQUFJLEdBQUcsQ0FBQyxlQUFlLEVBQUU7YUFDbEQsV0FBVyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUM7YUFDM0IsU0FBUyxDQUFDLGlCQUFpQixDQUFDO2FBQzVCLG1CQUFtQixDQUFDLG1CQUFtQixDQUFDO2FBQ3hDLFlBQVksQ0FBQyxXQUFXLEVBQUUsRUFBRSxlQUFlLEVBQUUsS0FBSyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUU5RCxJQUFJLEdBQUcsQ0FBQyxjQUFjLENBQUMsbUJBQW1CLENBQUMsSUFBSSxFQUFFLGVBQWUsRUFBRTtZQUNoRSxjQUFjO1lBQ2QsTUFBTSxFQUFFLENBQUUsS0FBSyxDQUFDLEdBQUcsQ0FBRTtTQUN0QixDQUFDLENBQUM7SUFDTCxDQUFDO0NBQ0Y7QUFFRCxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQztBQUMxQixJQUFJLEdBQUcsQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDcEIsSUFBSSxHQUFHLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFDO0FBQ3BCLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBpYW0gPSByZXF1aXJlKCdAYXdzLWNkay9hd3MtaWFtJyk7XG5pbXBvcnQgc25zID0gcmVxdWlyZSgnQGF3cy1jZGsvYXdzLXNucycpO1xuaW1wb3J0IHNxcyA9IHJlcXVpcmUoJ0Bhd3MtY2RrL2F3cy1zcXMnKTtcbmltcG9ydCBjZGsgPSByZXF1aXJlKCdAYXdzLWNkay9jZGsnKTtcblxuY2xhc3MgQUNMIGV4dGVuZHMgY2RrLlN0YWNrIHtcbiAgY29uc3RydWN0b3IocGFyZW50OiBjZGsuQXBwLCBuYW1lOiBzdHJpbmcpIHtcbiAgICBzdXBlcihwYXJlbnQsIG5hbWUpO1xuXG4gICAgY29uc3QgdG9waWMgPSBuZXcgc25zLlRvcGljKHRoaXMsICdNeVRvcGljJyk7XG4gICAgY29uc3QgcXVldWUgPSBuZXcgc3FzLlF1ZXVlKHRoaXMsICdNeVF1ZXVlJywge1xuICAgICAgdmlzaWJpbGl0eVRpbWVvdXRTZWM6IDMwMFxuICAgIH0pO1xuXG4gICAgdG9waWMuc3Vic2NyaWJlUXVldWUocXVldWUpO1xuICB9XG59XG5cbmNsYXNzIENGTiBleHRlbmRzIGNkay5TdGFjayB7XG4gIGNvbnN0cnVjdG9yKHBhcmVudDogY2RrLkFwcCwgbmFtZTogc3RyaW5nKSB7XG4gICAgc3VwZXIocGFyZW50LCBuYW1lKTtcblxuICAgIGNvbnN0IHRvcGljID0gbmV3IHNucy5jbG91ZGZvcm1hdGlvbi5Ub3BpY1Jlc291cmNlKHRoaXMsICdNeVRvcGljJyk7XG4gICAgY29uc3QgcXVldWUgPSBuZXcgc3FzLmNsb3VkZm9ybWF0aW9uLlF1ZXVlUmVzb3VyY2UodGhpcywgJ015UXVldWUnKTtcblxuICAgIG5ldyBzbnMuY2xvdWRmb3JtYXRpb24uU3Vic2NyaXB0aW9uUmVzb3VyY2UodGhpcywgJ1RvcGljVG9RdWV1ZScsIHtcbiAgICAgIHRvcGljQXJuOiB0b3BpYy5yZWYsIC8vIHJlZiA9PSBhcm4gZm9yIHRvcGljc1xuICAgICAgZW5kcG9pbnQ6IHF1ZXVlLnF1ZXVlTmFtZSxcbiAgICAgIHByb3RvY29sOiAnc3FzJ1xuICAgIH0pO1xuXG4gICAgY29uc3QgcG9saWN5RG9jdW1lbnQgPSBuZXcgaWFtLlBvbGljeURvY3VtZW50KCk7XG4gICAgcG9saWN5RG9jdW1lbnQuYWRkU3RhdGVtZW50KG5ldyBpYW0uUG9saWN5U3RhdGVtZW50KClcbiAgICAgIC5hZGRSZXNvdXJjZShxdWV1ZS5xdWV1ZUFybilcbiAgICAgIC5hZGRBY3Rpb24oJ3NxczpTZW5kTWVzc2FnZScpXG4gICAgICAuYWRkU2VydmljZVByaW5jaXBhbCgnc25zLmFtYXpvbmF3cy5jb20nKVxuICAgICAgLnNldENvbmRpdGlvbignQXJuRXF1YWxzJywgeyAnYXdzOlNvdXJjZUFybic6IHRvcGljLnJlZiB9KSk7XG5cbiAgICBuZXcgc3FzLmNsb3VkZm9ybWF0aW9uLlF1ZXVlUG9saWN5UmVzb3VyY2UodGhpcywgJ015UXVldWVQb2xpY3knLCB7XG4gICAgICBwb2xpY3lEb2N1bWVudCxcbiAgICAgIHF1ZXVlczogWyBxdWV1ZS5yZWYgXVxuICAgIH0pO1xuICB9XG59XG5cbmNvbnN0IGFwcCA9IG5ldyBjZGsuQXBwKCk7XG5uZXcgQUNMKGFwcCwgJ2FjbCcpO1xubmV3IENGTihhcHAsICdjZm4nKTtcbmFwcC5ydW4oKTtcbiJdfQ==